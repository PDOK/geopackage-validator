name: Pytest

on:
  - push
  - pull_request

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        python-version: ['3.9', '3.8', '3.7', '3.6']
        gdal-version: ['3.4.1', '3.6.1']
        exclude:
          - os: ubuntu-22.04
            python-version: '3.6'
          - os: ubuntu-20.04
            gdal-version: '3.6.1'
    steps:
    - name: Checkout 🛎️
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }} 🐍
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: install gdal
      run: |
        sudo apt-add-repository ppa:ubuntugis/ubuntugis-unstable
        sudo apt-get update
        echo available python3-gdal versions: $(apt-cache madison python3-gdal | cut -f2 -d "|" | tr -d " ")
        echo available libgdal-dev versions: $(apt-cache madison libgdal-dev | cut -f2 -d "|" | tr -d " ")
        export APT_GDAL_VERSION=$(apt-cache madison python3-gdal | grep ${{ matrix.gdal-version }} | head -n1 | cut -f2 -d "|" | tr -d " ")
        echo "using version ->${APT_GDAL_VERSION}<-"
        sudo apt-get install libgdal30="${APT_GDAL_VERSION}" python3-gdal="${APT_GDAL_VERSION}" libgdal-dev="${APT_GDAL_VERSION}"
    - name: Install dependencies for test
      run: |
        python -m pip install --upgrade pip wheel
        python -m pip install setuptools==57.*
        python -m pip freeze
        if [ "${{ matrix.python-version }}" == "3.6" ]
        then
           echo "hack setup.cfg to accomodate python version <= 3.6"
           sed -i 's/geopackage_validator.constants.__version__/0.0.0/g' setup.cfg
        fi
    - name: Install dependencies from config
      run: |
        # we need to pin GDAL here to match the python3-gdal
        pip install GDAL==${{ matrix.gdal-version }}
        pip3 install --no-cache-dir .[test]
    - name: Test with pytest
      run: |
        pytest -vv
    - name: Test with black
      run: |
        black --check .
